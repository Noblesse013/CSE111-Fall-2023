# -*- coding: utf-8 -*-
"""Solve L4 CW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fJwUCdQ2k4O2jfbx08_P0gDutUXX_XFG
"""

#task1
class Student:
  def __init__(self,name,id,dept='CSE'):
    self.name=name
    self.id=id
    self.dept=dept
  def dailyEffort(self,hr):
   self.hr=hr
  def printDetails(self):
    print(f'Name: {self.name}\nID: {self.id}\nDepartment: {self.dept}\nDaily Effort: {self.hr} hour(s)')
    if self.hr<=2:
      print('Suggestion: Should give more effort!')
    elif self.hr<=4:
       print('Suggestion: Keep up the good work!')
    else:
      print('Suggestion: Excellent! Now motivate others.')


harry = Student('Harry Potter', 123)
harry.dailyEffort(3)
harry.printDetails()
print('========================')
john = Student("John Wick", 456, "BBA")
john.dailyEffort(2)
john.printDetails()
print('========================')
naruto = Student("Naruto Uzumaki", 777, "Ninja")
naruto.dailyEffort(6)
naruto.printDetails()

#task2
class Farmer:
  def __init__(self,name=None):
    self.name=name
    self.crops=[]
    self.fish=[]
    if type(self.name)==str:
      print(f"Welcome to your farm, {self.name}!")
    elif type(self.name)==int:
      print(f'Welcome to your farm. Your farm ID is {self.name}!')
    else:
      print('Welcome to your farm !')
  def addCrops(self,*crops):
     for i in crops:
      self.crops.append(i)
     if len(crops)==0:
       print("No crop(s) added.")
     else:
       print(f'{len(crops)} crop(s) added.')
  def addFishes(self,*fish):
      for i in fish:
       self.fish.append(i)
      if len(fish)==0:
        print("No fish added.")
      else:
        print(f'{len(fish)} fish(s) added.')
  def showGoods(self):
    if len(self.crops)==0:
      print("You don't have any crop(s).")
    else:
     print(f'You have {len(self.crops)} crop(s):')
     print(",".join(self.crops))

    if len(self.fish)==0:
      print("You don't have any fish(s).")
    else:
     print(f'You have {len(self.fish)} fish(s):')
     print(",".join(self.fish))
f1 = Farmer()
print("-------------------")
f1.addCrops('Rice', "Jute", "Cinnamon")
print("-------------------")
f1.addFishes()
print("-------------------")
f1.addCrops('Mustard')
print("-------------------")
f1.showGoods()
print("-------------------")
f2 = Farmer("Korim Mia")
print("-------------------")
f2.addFishes('Pangash', 'Magur')
print("-------------------")
f2.addCrops("Wheat", "Potato")
print("-------------------")
f2.addFishes("Koi", "Tuna", "Sardine")
print("-------------------")
f2.showGoods()
print("-------------------")
f3 = Farmer(2865127000)
print("-------------------")
f3.addCrops()
print("-------------------")
f3.addFishes("Katla")
print("-------------------")
f3.showGoods()
print("-------------------")

#task3
class TaxiLagbe:
  def __init__(self, no, area):
    self.number = no
    self.area = area
    self.total = []
    self.fare = 0

  def addPassenger(self, *arg ):
    for i in arg:
      if len(self.total) < 4:
        self.total.append(i.split('_')[0])
        self.fare += int(i.split('_')[1])
        print('Dear '+i.split('_')[0]+'! Welcome to TaxiLagbe.')
      else:
        print('Taxi Full! No more passengers can be added.')

  def printDetails(self):
    print('Trip info for Taxi number:', self.number)
    print(f'This taxi can cover only {self.area} area')
    print('Total passengers:', len(self.total))
    print('Passenger lists:')
    print(', '.join(self.total))
    print(f'Total collected fare: {self.fare} Taka')


taxi1 = TaxiLagbe('1010-01', 'Dhaka')
print('-------------------------------')
taxi1.addPassenger('Walker_100', 'Wood_200','Matt_100')
taxi1.addPassenger('Wilson_105')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi1.addPassenger('Karen_200')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi2 = TaxiLagbe('1010-02', 'Khulna')
taxi2.addPassenger('Ronald_115', 'Parker_215')
print('-------------------------------')
taxi2.printDetails()

#task4
class Sphere:
  def __init__(self,id,radius=1,color='White'):
    self.id=id
    self.radius=radius
    self.color=color
    self.volume=(4/3)*3.1416*(self.radius**3)
  def printDetails(self):
    print(f"Sphere ID: {self.id}\nColor: {self.color}\nVolume: {self.volume}")
  def merge_sphere(self,*sphere):
    print("Spheres are being merged")
    for i in sphere:
      self.volume+=i.volume
      if i.color!=self.color:
        self.color='Mixed Color'


sphere1 = Sphere("Sphere 1")
print("1***************")
sphere1.printDetails()
print("2***************")
sphere2 = Sphere("Sphere 2", 3)
print("3***************")
sphere2.printDetails()
print("4***************")
sphere3 = Sphere("Sphere 3", 2)
print("5***************")
sphere3.printDetails()
print("6***************")
sphere3.merge_sphere(sphere1,sphere2)
print("7***************")
sphere3.printDetails()
print("8***************")
sphere4 = Sphere("Sphere 4", 5, "Purple")
print("9***************")
sphere4.merge_sphere(sphere3)
print("10***************")
sphere4.printDetails()
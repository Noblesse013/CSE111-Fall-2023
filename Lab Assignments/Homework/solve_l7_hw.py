# -*- coding: utf-8 -*-
"""Solve L7 HW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K80qHkKzWBTD7HgDzzrq2dHLM1EfQi2R
"""

#task1
class KK_tea:
    total= {'KK Regular Tea': 0}

    def __init__(self, price, tea_bags=50):
        self.name = "KK Regular Tea"
        self.weight = tea_bags * 2
        self.tea_bags = tea_bags
        self.price = price
        self.status = False

    def product_detail(self):
        print(f"Name: {self.name}, Weight: {self.weight}\nTea Bags: {self.tea_bags}, Price: {self.price}\nStatus: {self.status}")

    @classmethod
    def total_sales(cls):
        print(f"Total sales: {cls.total}")

    @classmethod
    def update_sold_status_regular(cls, *regular_teas):
        for tea in regular_teas:
            tea.status = True
            cls.total[tea.name] = cls.total.get(tea.name, 0) + 1

class KK_flavoured_tea(KK_tea):
    def __init__(self, flavour, price, tea_bags=50):
        super().__init__(price, tea_bags)
        self.flavor=flavour
        self.name = f"KK {flavour} Tea"

    @classmethod
    def update_sold_status_flavoured(cls, *flavoured_teas):
        for tea in flavoured_teas:
            tea.status = True
            cls.total[tea.name] = cls.total.get(tea.name, 0) + 1


t1 = KK_tea(250)
print("-----------------1-----------------")
t1.product_detail()
print("-----------------2-----------------")
KK_tea.total_sales()
print("-----------------3-----------------")
t2 = KK_tea(470, 100)
t3 = KK_tea(360, 75)
KK_tea.update_sold_status_regular(t1, t2, t3)
print("-----------------4-----------------")
t3.product_detail()
print("-----------------5-----------------")
KK_tea.total_sales()
print("-----------------6-----------------")
t4 = KK_flavoured_tea("Jasmine", 260, 50)
t5 = KK_flavoured_tea("Honey Lemon", 270, 45)
t6 = KK_flavoured_tea("Honey Lemon", 270, 45)
print("-----------------7-----------------")
t4.product_detail()
print("-----------------8-----------------")
t6.product_detail()
print("-----------------9-----------------")
KK_flavoured_tea.update_sold_status_flavoured(t4, t5, t6)
print("-----------------10-----------------")
KK_tea.total_sales()

#task2
class Tournament:
    def __init__(self,name='Default'):
        self.__name = name
    def set_name(self,name):
        self.__name = name
    def get_name(self):
        return self.__name
class Cricket_Tournament(Tournament):
  def __init__(self,name='Default',nt=0,ty='No type'):
    super().__init__(name)
    self.nt=nt
    self.ty=ty
  def detail(self):
    return f'''Cricket Tournament Name:{self.get_name()}
Number of Teams: {self.nt}
Type:{self.ty}'''

class Tennis_Tournament(Tournament):
   def __init__(self,name = 'Default', score = 0):
    super().__init__(name)
    self.p = score
   def detail(self):
    return f'''Tennis Tournament Name:{self.get_name()}
Number of players:{self.p}'''

ct1 = Cricket_Tournament()
print(ct1.detail())
print("-----------------------")
ct2 = Cricket_Tournament("IPL",10,"t20")
print(ct2.detail())
print("-----------------------")
tt = Tennis_Tournament("Roland Garros",128)
print(tt.detail())

#task3
class Shape:

  def __init__(self, name='Default', height=0, base=0):
    self.area = 0
    self.name = name
    self.height = height
    self.base = base

  def get_height_base(self):
    return "Height: "+str(self.height)+",Base: "+str(self.base)

class triangle(Shape):
  def calcArea(self):
    self.area=0.5*self.base*self.height
  def printDetail(self):
    return f'''Shape Name:{self.name}
{self.get_height_base()}
Area = {self.area}'''

class trapezoid(Shape):
  def __init__(self,n,h,b,sa):
    super().__init__(n,h,b)
    self.side1 = sa
  def calcArea(self):
    self.area = ((self.base + self.side1)/2)*self.height
  def printDetail(self):
    return f'''Shape Name:{self.name}
{self.get_height_base()}, Side_A:{self.side1}
Area = {self.area}'''

tri_default = triangle()
tri_default.calcArea()
print(tri_default.printDetail())
print('--------------------------')
tri = triangle('Triangle', 10, 5)
tri.calcArea()
print(tri.printDetail())
print('---------------------------')
trap = trapezoid('Trapezoid', 10, 6, 4)
trap.calcArea()
print(trap.printDetail())

#task 4
class Fruit:
    def __init__(self, formalin=False, name=''):
        self.__formalin = formalin
        self.name = name

    def getName(self):
        return self.name

    def hasFormalin(self):
        return self.__formalin

class testFruit:
    def test(self, f):
        print('----Printing Detail----')
        if f.hasFormalin():
            print('Do not eat the',f.getName(),'.')
            print(f)
        else:
            print('Eat the',f.getName(),'.')
            print(f)

class Mango(Fruit):
  def __init__(self):
    super().__init__(True,'Mango')
    self.hasFormalin() == True
  def __str__(self):
    return f'Mangos are bad for you'

class Jackfruit(Fruit):
  def __init__(self):
    super().__init__(False,'Jackfruit')
  def __str__(self):
    return f'Jackfruit are good for you'


m = Mango()
j = Jackfruit()
t1 = testFruit()
t1.test(m)
t1.test(j)

#task5
class Employee:
    def __init__(self, name, employee_id, department):
        self.name = name
        self.employee_id = employee_id
        self.department = department
        self.salary = 30000

    def employeeDetails(self):
        print(f"Name: {self.name}, Dept {self.department}\nEmployee id: {self.employee_id}, Salary: {self.salary}")

    def workDistribution(self, department):
        if department == "Human Resource":
            print("Collect work distribution details from the manager.")
        else:
            print("Collect work distribution loads from the HR department.")

    def increment(self):
        self.salary += 0.10 * self.salary
        print(f"Incremented Salary: {self.salary}")


class Foreign_employee(Employee):
    def __init__(self, name, employee_id, department):
        super().__init__(name, employee_id, department)
        self.salary = 30000

    def employeeDetails(self):
        super().employeeDetails()
        print("Employee Type: Foreign")

    def increment(self):
        self.salary += 0.15 * self.salary
        print(f"Incremented Salary: {self.salary}")


class Part_time_employee(Employee):
    def __init__(self, name, employee_id, department):
        super().__init__(name, employee_id, department)
        self.salary = 15000

    def employeeDetails(self):
        super().employeeDetails()
        print("Employee Type: Part Time")

    def increment(self):
        print("Sadly, there is no increment for the part-time employees!!")



print("1------------------------------------------")
emp1 = Employee("Nawaz Ali", 102, "Marketing")
print("2------------------------------------------")
emp1.employeeDetails()
print("3------------------------------------------")
emp1.workDistribution("Marketing")
print("4------------------------------------------")
emp1.increment()
emp1.employeeDetails()
print("5------------------------------------------")
f_emp = Foreign_employee("Nadvi", 311, "Human Resource")
f_emp.employeeDetails()
print("6------------------------------------------")
f_emp.workDistribution("Human Resource")
print("7------------------------------------------")
f_emp.increment()
f_emp.employeeDetails()
print("8------------------------------------------")
p1_emp = Part_time_employee("Asif", 210, "Sales")
p2_emp = Part_time_employee("Olive", 223, "Accounts")
print("9------------------------------------------")
p1_emp.employeeDetails()
print("10------------------------------------------")
p1_emp.workDistribution("Sales")
print("11------------------------------------------")
p2_emp.increment()
print("12------------------------------------------")
p2_emp.employeeDetails()

#task7
class Account:
    def __init__(self, account_number, balance):
      self.account_number = account_number
      self.balance = balance
      self.account_type = "General"
      self.maturity = 0


    def print_details(self):
      print("------ Account details ------")
      print(f"Account Type: {self.account_type}, Maturity: {self.maturity} years")
      print(f"Account Number: {self.account_number}, Balance: ${self.balance:.2f}")


    def deposit(self, amount):
      self.balance += amount
      print(f"Deposited ${amount:.2f}. New Balance: ${self.balance:.2f}")


    def withdraw(self, amount):
      if self.balance >= amount:
          self.balance -= amount
          print(f"Withdrew ${amount:.2f}. New Balance: ${self.balance:.2f}")
      else:
          print("Insufficient funds.")


    def year_passed(self, year):
      self.maturity += year
      print(f"Maturity of the account: {self.maturity} years")

class SavingsAccount(Account):
    def __init__(self, account_type, account_number, balance, interest_rate, min_limit):
        super().__init__(account_number, balance)
        self.account_type = account_type
        self.interest_rate = interest_rate
        self.min_limit = min_limit

    def print_details(self):
        super().print_details()
        print(f"Interest Rate: {self.interest_rate}, Minimum Limit: ${self.min_limit}")

    def deposit(self, amount):
        if amount >= self.min_limit:
            super().deposit(amount)
        else:
            print("Deposit amount is below the minimum limit.")

    def withdraw(self, amount):
        if self.balance - amount >= self.min_limit:
            super().withdraw(amount)
        else:
            print("Withdrawal would cross the minimum limit.")

    def apply_interest(self):
        interest = self.balance * self.interest_rate
        self.balance += interest
        print(f"Interest applied. New Balance: ${self.balance:.2f}")


class FixedDepositAccount(Account):
    def __init__(self, account_type, account_number, balance, maturity_period):
        super().__init__(account_number, balance)
        self.account_type = account_type
        self.maturity_period = maturity_period

    def deposit(self, amount):
        print("You cannot deposit in a fixed deposit account.")

    def withdraw(self, amount):
        if self.maturity >= self.maturity_period:
            super().withdraw(amount)
        else:
            print("Cannot withdraw, Account is not matured")


print("-----------1------------")
account = Account("A203", 2000)
account.print_details()
print("-----------2------------")
account.deposit(400)
account.withdraw(1500)
account.year_passed(2)
print("-----------3------------")
account.print_details()
print("-----------4------------")
savings_account = SavingsAccount("Savings","SA123", 1000, 0.05, 500)
savings_account.print_details()
print("-----------5------------")
savings_account.deposit(400)
print("-----------6------------")
savings_account.withdraw(1000)
print("-----------7------------")
savings_account.withdraw(800)
print("-----------8------------")
savings_account.apply_interest()
print("-----------9------------")
savings_account.print_details()
print("-----------10------------")
fixed_account1= FixedDepositAccount("Fixed Deposit","FDA321", 10000, 5)
fixed_account1.print_details()
print("-----------11------------")
fixed_account1.deposit(400)
print("-----------12------------")
fixed_account1.year_passed(6)
print("-----------13------------")
fixed_account1.withdraw(10000)
print("-----------14------------")
fixed_account1.print_details()
print("-----------15------------")
fixed_account2 = FixedDepositAccount("Fixed Deposit","FDA300", 50000, 7)
fixed_account2.print_details()
print("-----------16------------")
fixed_account2.withdraw(10000)

import math

class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
        self.area = 0

    def calculate_area(self):
        return self.area

    def print_details(self):
        print("--------- Printing details ----------")
        print(f'Co-ordinate: ({self.x},{self.y})')
        print(f'Area: {self.area}')

class Circle(Point):
    def __init__(self, radius, x=0, y=0):
        super().__init__(x, y)
        self.radius = radius
        self.area = self.calculate_area()

    def calculate_area(self):
        return round(math.pi * self.radius**2,4)

    def print_details(self):
        super().print_details()
        print(f'Radius: {self.radius}')

class Sphere(Point):
    def __init__(self, radius, x=0, y=0):
        super().__init__(x, y)
        self.radius = radius
        self.area = self.calculate_area()

    def calculate_area(self):
        return round(4 * math.pi * self.radius**2,4)

    def print_details(self):
        super().print_details()
        print(f'Radius: {self.radius}')


print("--------------1---------------")
p1 = Point(2,3)
print(f'Area of p1: {p1.calculate_area()}')
print("--------------2---------------")
p1.print_details()
print("--------------3---------------")
p2 = Point()
p2.print_details()
print("--------------4---------------")
c1 = Circle(4,0,3)
print(f'Area of c1: {c1.calculate_area()}')
print("--------------5---------------")
c1.print_details()
print("--------------6---------------")
c2 = Circle(7)
print(f'Area of c2: {c2.calculate_area()}')
print("--------------7---------------")
sph1 = Sphere(3,0,2)
print(f'Area of sph1: {sph1.calculate_area()}')
print("--------------8---------------")
sph1.print_details()
print("--------------9---------------")
sph2 = Sphere(6)
print(f'Area of sph2: {sph2.calculate_area()}')
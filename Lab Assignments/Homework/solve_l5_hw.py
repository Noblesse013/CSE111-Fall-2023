# -*- coding: utf-8 -*-
"""Solve L5 HW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iLShK4Q-Q_HEZ0hkjJc0T4CPpateae8j
"""

#task1
class Teacher:
  def __init__(self,name,dept):
    self.__name=name
    self.__dept=dept
    self.__course=[]
  def addCourse(self,c):
    self.__course.append(c.course)
  def printDetail(self):
    print('====================================')
    print(f'Name: {self.__name}\nDepartment: {self.__dept}')
    print('List of courses:')
    print('====================================')
    for i in self.__course:
      print(i)
    print('====================================')
class Course:
 def __init__(self,course):
   self.course=course
t1 = Teacher("Saad Abdullah", "CSE")
t2 = Teacher("Mumit Khan", "CSE")
t3 = Teacher("Sadia Kazi", "CSE")
c1 = Course("CSE 110 Programming Language I")
c2 = Course("CSE 111 Programming Language-II")
c3 = Course("CSE 220 Data Structures")
c4 = Course("CSE 221 Algorithms")
c5 = Course("CSE 230 Discrete Mathematics")
c6 = Course("CSE 310 Object Oriented Programming")
c7 = Course("CSE 320 Data Communications")
c8 = Course("CSE 340 Computer Architecture")
t1.addCourse(c1)
t1.addCourse(c2)
t2.addCourse(c3)
t2.addCourse(c4)
t2.addCourse(c5)
t3.addCourse(c6)
t3.addCourse(c7)
t3.addCourse(c8)
t1.printDetail()
t2.printDetail()
t3.printDetail()

#task2
class Student:
    def __init__(self, name, student_id, cgpa):
        self.__name = name
        self.__id = student_id
        self.__cgpa = cgpa

    def getName(self):
        return self.__name

    def getId(self):
        return self.__id

    def getCgpa(self):
        return self.__cgpa

    def setId(self, new):
        self.__id = new


class Department:
    def __init__(self, name):
        self.__name = name
        self.__students = []

    def findStudent(self, student_id):
        found = False
        for student in self.__students:
            if student.getId() == student_id:
                print(f"Student info:\nStudent Name: {student.getName()}\nID: {student.getId()}\nCGPA:  {student.getCgpa()}")
                found = True
                break
        else:
            print("Student with this ID doesn't exist, Please give a valid ID")

    def addStudent(self, *students):
        for student in students:
            exists = False
            for s in self.__students:
                if s.getId() == student.getId():
                    exists = True
                    break

            if exists:
                print("Student with the same ID already exists, Please try with another ID")
            else:
                print(f"Welcome to {self.__name} department, {student.getName()}")
                self.__students.append(student)
    def details(self):
        print(f"Department Name: {self.__name}")
        print(f"Number of student: {len(self.__students)}")
        print("Details of the students:")
        for student in self.__students:
            print(f"Student name: {student.getName()}, ID: {student.getId()}, cgpa: {student.getCgpa()}")

s1 = Student("Akib", 22301010, 3.29)
s2 = Student("Reza", 22101010, 3.45)
s3 = Student("Ruhan", 23101934, 4.00)
print("1==================================")
cse = Department("CSE")
cse.findStudent(22112233)
print("2==================================")
cse.addStudent(s1, s2, s3)
print("3==================================")
cse.details()
print("4==================================")
cse.findStudent(22301010)
print("5==================================")
s4 = Student("Nakib", 22301010, 3.22)
cse.addStudent(s4)
print("6==================================")
s4.setId(21201220)
cse.addStudent(s4)
print("7==================================")
cse.details()
print("8==================================")
s5 = Student("Sakib", 22201010, 2.29)
cse.addStudent(s5)
print("9==================================")
cse.details()



#task3
class Cargo:
    def __init__(self, name, weight):
        self.__name = name
        self.__weight = weight

    def get_name(self):
        return self.__name

    def get_weight(self):
        return self.__weight


class Spaceship:
    def __init__(self, name, capacity):
        self.__name = name
        self.__capacity = capacity
        self.__cargo = []

    def load_cargo(self, cargo):
        if sum(item.get_weight() for item in self.__cargo) + cargo.get_weight() <= self.__capacity:
            self.__cargo.append(cargo)

        else:
            print(f"Warning: Unable to load {cargo.get_name()} inside {self.__name}. "
                  f"Exceeds capacity by {cargo.get_weight() + sum(item.get_weight() for item in self.__cargo) - self.__capacity}.")

    def display_details(self):
        print(f"Spaceship Name: {self.__name}")
        print(f"Capacity: {self.__capacity}")
        print(f"Current Cargo Weight: {sum(item.get_weight() for item in self.__cargo)}")
        print(f"Cargo: {[item.get_name() for item in self.__cargo]}")

falcon = Spaceship("Falcon", 50000)
apollo = Spaceship("Apollo", 100000)
enterprise = Spaceship("Enterprise", 220000)
print("1.===================================")

gold = Cargo("Gold", 20000)
platinum = Cargo("Platinum", 25000)
dilithium = Cargo("Dilithium", 50000)
trilithium = Cargo("Trilithium", 70000)
neutronium = Cargo("Neutronium", 80000)
print("2.===================================")
# Loading cargo onto spaceships
falcon.load_cargo(gold)
falcon.load_cargo(platinum)
falcon.display_details()
print("3.===================================")
apollo.load_cargo(gold)  # Apollo will not reach its total capacity
apollo.display_details()
print("4.===================================")
falcon.load_cargo(neutronium)  # This should exceed Falcon's capacity
print("5.===================================")
enterprise.load_cargo(dilithium)
enterprise.load_cargo(trilithium)
enterprise.load_cargo(neutronium)  # This should not exceed Enterprise's capacity
enterprise.display_details()

#task4
class Student:
  def __init__(self,name,id,dept):
    self.name=name
    self.id=id
    self.dept=dept
    self.email=None
    self.password=None
    self.login_status=None
    self.courses=[]
    print('Student object is created!')
class Usis:
  def __init__(self):
    print("USIS is ready to use!")
  def login(self,name):
    if name.email==None and name.password==None:
      print("Email and password need to be set.")
    else:
      name.login_status=True
      print("Login sucessful")
  def advising(self,n1,*s):
    if n1.login_status!=True:
      print('Please login to advise courses!')
    elif len(s)==0:
      print("You haven't selected any courses.")
    elif len(s)<4:
      for i in s:
       n1.courses.append(i)
      print("Advising successful!")
    elif len(s)>3:
      print("You need special approval to take more than 3 courses.")
  def individualDetails(self,n):
    s=''
    for i in n.courses:
      s+=i+','
    return(f'Name: {n.name}\nID: {n.id}\nDepartment: {n.dept}\nAdvised courses:{s[:-1]}')



rakib = Student("Rakib", 12301455, "CSE")
print("1***********************")
usis_obj = Usis()
print("2***********************")
usis_obj.login(rakib)
print("3***********************")
usis_obj.advising(rakib)
print("4***********************")
rakib.email = "rakib@hotmail.com"
rakib.password = "1234"
print("5***********************")
usis_obj.login(rakib)
print("6***********************")
usis_obj.advising(rakib)
print("7***********************")
usis_obj.advising(rakib, "CSE110", "PHY111", "MAT110", "CSE260")
print("8***********************")
usis_obj.advising(rakib, "CSE110", "PHY111", "MAT110")
print("9***********************")
print(usis_obj.individualDetails(rakib))

#task5
class Train:
  def __init__(self,a,*arg):
    self.name = a
    self.range = arg
    self.pas = []
    self.dic1 = {}
    print(f'Welcome aboard to {self.name}\nStart: {self.range[0]}\nDestination: {self.range[-1]}')

  def addPassenger(self,*obj):
    for i in obj:
      self.pas = []
      x = 0
      y = 0
      print(f'{i.name} welcome aboard')
      if i.end == None:
        i.end = self.range[len(self.range)-1]
      if i.start == None:
        i.start = self.range[0]

      self.pas.append(i.start)
      self.pas.append(i.end)
      for j in range(len(self.range)):
        if i.start == self.range[j]:
          x = j
        if i.end == self.range[j]:
          y = j
      new = y-x
      fare = new*100
      self.pas.append(fare)
      self.dic1.update({i.name:self.pas})

  def allPassengerDetails(self):
    for x,y in self.dic1.items():
      print(f'Name:{x}, Start: {y[0]}, Destination: {y[1]}, Fair: ${y[2]}')

class Passenger:
  def __init__(self,n,s = None,e = None):
     self.name = n
     self.start = s
     self.end = e



t1 = Train('T1-Express','New York','Manhattan','Brooklyn','Boston')

print("1========================")
p1 =Passenger("Naruto")
t1.addPassenger(p1)
p2 = Passenger("Sasuke","Manhattan")
p3 = Passenger("Hinata","Manhattan","Brooklyn")
print("2========================")
t1.addPassenger(p2,p3)
print("3========================")
t1.allPassengerDetails()
print("4========================")
t2 = Train('Europe-Express','London','Paris','Brussels','Turkey')
print("5========================")
p4 =Passenger("Max","London","Brussels")
p5 = Passenger("Eleven","Paris")
p6 = Passenger("Mike","Brussels")
t2.addPassenger(p4,p5,p6)
print("6========================")
t2.allPassengerDetails()

#task6
class BracuStudent:
  def __init__(self,name,home):
    self.name=name
    self.home=home
    self.buspass=False
  def show_details(self):
   print(f'Student Name: {self.name}')
   print(f'Lives in {self.home}')
   print(f'Have Bus Pass? {self.buspass}')

  def get_pass(self):
      self.buspass=True
      return
class BracuBus:
   def __init__(self, route, max_capacity=2):
        self.route = route
        self.max_capacity = max_capacity
        self.passengers = []


   def show_details(self):
        print(f"Bus Route: {self.route}")
        print(f"Passengers Count: {len(self.passengers)} (Max: {self.max_capacity})")
        print(f"Passengers On Board: {self.passengers}")

   def board(self, *students):
        if not students:
            print("No passenger!")
            return
        else:
            for student in students:
             if not student.buspass:
               print("You don't have bus pass!")

             elif student.home != self.route:
                print("You got on wrong bus!")
             elif len(self.passengers) >= self.max_capacity:
                print("Bus is full!")

             else:
                self.passengers.append(student.name)
                print(f"{student.name} boarded the bus.")


st1 = BracuStudent("Afif", "Mirpur")
print("1===========================")
st2 = BracuStudent("Shanto", "Motijheel")
st3 = BracuStudent("Taskin", "Mirpur")
st1.show_details()
st2.show_details()
print("2===========================")
st3.show_details()
print("3===========================")
bus1 = BracuBus("Mirpur")
bus2 = BracuBus("Azimpur", 5)
bus1.show_details()
bus2.show_details()
print("4===========================")
st2.get_pass()
st3.get_pass()
print("5===========================")
st2.show_details()
st3.show_details()
print("6===========================")
bus1.board()
print("7===========================")
bus1.board(st1, st2)
print("8===========================")
st1.get_pass()
st2.home = "Mirpur"
st1.show_details()
st2.show_details()
print("9===========================")
bus1.board(st1, st2, st3)
print("10===========================")
bus1.show_details()
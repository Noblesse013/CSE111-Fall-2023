# -*- coding: utf-8 -*-
"""Solve L3 HW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x_YUjRZTAkEAfIGtsZx0Cux_U_d5nfiJ
"""

#task1
class CellPackage:
    def __init__(self, price,data, talk_time, messages, cashback, validity):
        self.data = data
        self.talk_time = talk_time
        self.messages = messages
        self.cashback = cashback
        self.validity = validity
        self.price = price

    def display_info(self):
        if self.data!='0 GB':
            self.data=self.data.split(' ')
            self.data=int(self.data[0])*1024
            print(f"Data = {self.data} MB")

        if self.talk_time:
            print(f"Talktime = {self.talk_time} Minutes")

        if self.messages:
            print(f"SMS/MMS = {self.messages}")

        print(f"Validity = {self.validity} Days")
        print(f"--> Price = {self.price} tk")
        if self.cashback!='0%':
           self.cashback=round(int(self.price*int(self.cashback.rstrip('%')))/100)
           print(f"Buy now to get {self.cashback} tk cashback.")

pkg = CellPackage(150, '6 GB', 99, 20, '7%', 7)
print('============= Package 1 =============')
pkg.display_info()
pkg2 = CellPackage(700, '35 GB', 700, 0, '10%', 30)
print('============= Package 2 =============')
pkg2.display_info()
pkg4 = CellPackage(120, '0 GB', 190, 0, '0%', 10)
print('============= Package 3 =============')
pkg4.display_info()

#task2
class box:
  def __init__(self,list):
    self.height=list[0]
    self.width=list[1]
    self.breadth=list[2]
    print("Creating a Box")
  def boxDescription(self):
    print(f'Height:{self.height}\nWidth:{self.width}\nBreadth:{self.breadth}')
  def volume(self):
    volume=self.height*self.width*self.breadth
    return f'Volume of the box is {volume} cubic units.'

print("Box 1")
b1 = box([10,10,10])
print("=========================")
b1.boxDescription()
print(b1.volume())
print("-------------------------")
print("Box 2")
b2 = box((30,10,10))
print("=========================")
b2.boxDescription()
print(b2.volume())
b2.height = 300
print("Updating Box 2!")
print("Height:", b2.height)
print("Width:", b2.width)
print("Breadth:", b2.breadth)
volume = b2.height * b2.width * b2.breadth
print(f"Volume of the box is {volume} cubic units.")
print("-------------------------")
print("Box 3")
b3 = b2
b3.boxDescription()
print(b3.volume())
one = (b3 == b2)
print(b3.width)
b3.width = 100
two = (b3 == b2)
print(b3.width)
print(b2.width)

#task3
import math

class Vector3D:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
        print(f'Vector <{self.x}, {self.y}, {self.z}> has been created.')

    def magnitude(self):
        return math.sqrt(self.x**2 + self.y**2 + self.z**2)

    def dot_product(self, other):
        return self.x * other.x + self.y * other.y + self.z * other.z

    def cross_product(self, other):
        x = self.y * other.z - self.z * other.y
        y = self.z * other.x - self.x * other.z
        z = self.x * other.y - self.y * other.x
        return f'<{x}, {y}, {z}>'


V1 = Vector3D(2, -3, 1)
V2 = Vector3D(-1, 4, 0)
print(f'Magnitude of the first vector = {V1.magnitude()}')
print(f'Magnitude of the second vector = {V2.magnitude()}')
dot_product = V1.dot_product(V2)
print(f'Dot product of the two vectors = {dot_product}')
cross_product = V1.cross_product(V2)
print(f'Vector {cross_product} has been created.')
print(f'Cross product of the two vectors = {cross_product}')

#task4
class abcTech:
  def __init__(self,name,designation,department,skill=None,framework=None):
    self.name=name
    self.designation=designation
    self.department=department
    self.skill=[]
    self.framework=[]
    print(f"Welcome to abcTech, {self.name}!")
  def addProgrammingSkills(self,slist):
    for i in slist:
      self.skill.append(i)
  def addFrameworks(self,slist):
      for i in slist:
       self.framework.append(i)
  def printInfo(self):
    print(f'Name:  {self.name}\nDesignation:  {self.designation}\nDepartment: {self.department}\nProgramming Skills:  {", ".join(self.skill)}\nFrameworks:  {", ".join(self.framework)}')
  def calculateSalary(self,salary,hour):
    self.salary=salary
    self.hour=hour
    if self.hour>144:
       self.salary = self.salary+(self.hour-144)*800
       return self.salary
    elif self.hour<=144:
      return self.salary

print("-------------------------")
b1 =abcTech("Tamim Hasan", "Software Engineer", "Android Development")
print("-------------------------")
b1.addProgrammingSkills(["Java", "Python"])
b1.addProgrammingSkills(["Dart", "C++"])
b1.addFrameworks(["Express.js", "React"])
b1.printInfo()
print("-------------------------")
print(f"Your salary for this month is Tk. {b1.calculateSalary(45000, 156)}")
print("-------------------------")
print("-------------------------")
b2 =abcTech("Jahin Khandoker", "Senior Developer", "App Development")
print("-------------------------")
b2.addProgrammingSkills(["Java", "Dart", "Swift"])
b2.addFrameworks(["Flutter", "React Native"])
b2.addFrameworks(["Xamarin"])
b2.printInfo()
print("-------------------------")
print(f"Your salary for this month is Tk. {b2.calculateSalary(103000, 123)}")
print("-------------------------")

#task 5
'''DIY :3'''

#task6
class Store:
  def __init__(self,balance,total_items=0):
    self.balance=balance
    self.total_items=total_items
    self.dic={}
    print('New branch')
  def viewAllItems(self):
    if len(self.dic)==0:
      print(f"There are no items in your\ninventory")
    elif len(self.dic)!=0:
      st=''
      for i in self.dic.keys():
        st+=i+","
        st+="\n"
      print(f'All items:{st[:-2]}')
  def viewAllItemDetails(self):
      print(self.dic)
  def add_item(self,list):
      self.total_items+=1
      self.item=list[0]
      self.stock=list[1]
      self.buying=list[2]
      self.selling=list[3]
      for i in list:
       self.dic.update({self.item: {'stock': self.stock, 'buying_price':self.buying , 'selling_price': self.selling}})
      self.balance-=(self.stock*self.buying)
      print(f'Item added:{self.item}')

  def sell_item(self,item,quantity):
        if item in self.dic:
            if self.dic[item]['stock'] >= quantity:
                self.dic[item]['stock'] -= quantity
                revenue = quantity * self.dic[item]['selling_price']
                self.balance += revenue
            else:
                print(f"Sorry! {item} is not available at your desired quantity. Currently we have: {self.dic[item]['stock']}")
  def restock_item(self,item,quantity):
    if item in self.dic:
            if self.dic[item]['stock'] <= quantity:
                self.dic[item]['stock'] += quantity
                revenue = quantity * self.dic[item]['buying_price']
                self.balance -= revenue
                print(f"Restocked item:{item}\nCurrent stock:{self.dic[item]['stock']}")
            else:
                print(f"Sorry! {item} is not available at your desired quantity. Currently we have: {self.dic[item]['stock']}")

print("==========================")
branch1 = Store(5000)
print(f"Current Balance: {branch1.balance}")
print(f"Total items: {branch1.total_items}")
branch1.viewAllItems()
branch1.viewAllItemDetails()
print("==========================")
print(f"Current Balance: {branch1.balance}")
branch1.add_item(["ChaCha Noodles", 10, 5, 8])
print(f"Current Balance: {branch1.balance}")
branch1.add_item(["Sparrow Shampoo", 5, 10, 20])
print(f"Current Balance: {branch1.balance}")
print("==========================")
branch1.viewAllItems()
print()
branch1.viewAllItemDetails()
print()
print("==========================")
print(f"Current Balance: {branch1.balance}\n")
branch1.sell_item("ChaCha Noodles", 15)
print(f"Current Balance: {branch1.balance}\n")
branch1.viewAllItemDetails()
print()
branch1.sell_item("ChaCha Noodles", 10)
print()
print(f"Current Balance: {branch1.balance}\n")
branch1.viewAllItemDetails()
print()
print("==========================")
print(f"Current Balance: {branch1.balance}\n")
branch1.restock_item("ChaCha Noodles", 5)
print()
branch1.viewAllItemDetails()
print()
print(f"Current Balance: {branch1.balance}\n")
print("==========================")
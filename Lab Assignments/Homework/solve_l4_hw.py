# -*- coding: utf-8 -*-
"""Solve L4 HW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yDJeM8DzXof9LFyWykqnJTs9q5XUz23G
"""

#task1
class Student:
  def __init__(self,name,cg,creds=9,dept="CSE"):
    self.name=name
    self.cg=cg
    self.creds=creds
    self.dept=dept
    self.sch=''
  def checkScholarshipEligibility(self):
    if self.cg>=3.5 and self.creds>10:
       if self.cg>=3.7:
         self.sch='Merit-based'
         print(f'{self.name} is eligible for {self.sch} scholarship.')
       elif self.cg>=3.5 or self.cg<3.7:
        self.sch='Need-based '
        print(f'{self.name} is eligible for {self.sch} scholarship.')
    else:
        self.sch="No"
        print(f'{self.name} is not eligible for scholarship.')

  def showDetails(self):
    print(f'Name: {self.name}\nDepartment: {self.dept}\nCGPA: {self.cg}\nNumber of Credits: {self.creds}\nScholarship Status: {self.sch} scholarship')



print('--------------------------')
std1 = Student("Alif", 3.99, 12)
print('--------------------------')
std1.checkScholarshipEligibility()
print('--------------------------')
std1.showDetails()
print('--------------------------')
std2 = Student("Mim", 3.4)
std3 = Student("Henry", 3.5, 15,"BBA")
print('--------------------------')
std2.checkScholarshipEligibility()
print('--------------------------')
std3.checkScholarshipEligibility()
print('--------------------------')
std2.showDetails()
print('--------------------------')
std3.showDetails()
print('--------------------------')
std4 = Student("Bob", 4.0, 6, "CSE")
print('--------------------------')
std4.checkScholarshipEligibility()
print('--------------------------')
std4.showDetails()

#task2
class Foodie:
 menu = {'Chicken Lollipop':15,'Beef Nugget':20,'Americano':180,'Red Velvet':150,'Prawn Tempura':80,'Saute Veg':200}
 def __init__(self,name):
  self.name=name
  self.items=[]
  self.spent=0
  self.total=0
 def show_orders(self):
  return f'Frodo has {len(self.items)} item(s) in the cart.\nItems:{self.items}\nTotal spent: {self.total}'
 def order(self,*order):
  for i in order:
   item,quantity=i.split('-')
   self.items.append(item)
   self.spent=int(quantity)*self.menu[item]
   if item in self.menu:
    self.total+=self.spent
    print(f'Ordered - {item}, quantity - {quantity}, price (per Unit) -{self.menu[item]}.')
    print(f'Total price - {self.spent}')
 def pay_tips(self,tip=0):
    self.tip=tip
    if self.tip==0:
      print('No tips to the waiter.')
    else:
      self.total+=self.tip
      print(f'Gives {self.tip}/- tips to the waiter.')



f1 = Foodie('Frodo')
print(f1.show_orders())
print('1----------------------')
f1.order('Chicken Lollipop-3','Beef Nugget-6','Americano-1')
print('2----------------------')
print(f1.show_orders())
print('3----------------------')
f1.order('Red Velvet-1')
print('4----------------------')
f1.pay_tips(20)
print('5----------------------')
print(f1.show_orders())
f2 = Foodie('Bilbo')
print('6----------------------')
f2.order('Prawn Tempura-6','Saute Veg-1')
print('7----------------------')
f2.pay_tips()
print('8----------------------')
print(f2.show_orders())

#task3
class Department:
  def __init__(self,dept='ChE Department',sec=5):
    self.dept=dept
    self.sec=sec
    self.average=0
    self.total=0
    print(f'The {self.dept} has {self.sec} sections.')
  def add_students(self,*s):
    if len(s)>5:
      for i in s:
       self.total+=i
      self.average=round(self.total/len(s),2)
      print(f'The {self.dept} has an average of {self.average} students in each section.')

    elif len(s)<5:
      for i in s:
       self.total+=i
      print(f"The {self.dept} doesn't have {len(s)} sections.")
    else:
     for i in s:
      self.total+=i
     self.average=self.total/len(s)
     print(f'The {self.dept} has an average of {self.average} students in each section.')

  def merge_Department(self,*departments):
      total_students_mega =self.average*self.sec

      for department in departments:
       total_students_mega += department.average*department.sec
       print((department.dept + ' is merged to Engineering Department.'))
       self.average= total_students_mega /self.sec

      return f'Now the {self.dept} has an average of {round(self.average,1)} students in each section.'




d1 = Department()
print('1-----------------------------')
d2 = Department('MME Department')
print('2-----------------------------')
d3 = Department('NCE Department', 8)
print('3-----------------------------')
d1.add_students(12, 23, 12, 34, 21)
print('4-----------------------------')
d2.add_students(40, 30, 21)
print('5-----------------------------')
d3.add_students(12, 34, 41, 17, 30, 22, 32, 51)
print('6-----------------------------')
mega = Department('Engineering Department', 10)
print('7-----------------------------')
mega.add_students(21,30,40,36,10,32,27,51,45,15)
print('8-----------------------------')
print(mega.merge_Department(d1, d2))
print('9-----------------------------')
print(mega.merge_Department(d3))

#task4
class Shopidify:

    def __init__(self, name=None):
        self.name=name
        self.g_id=0
        if self.name==None:
          self.name="Guest"
          self.cart = {}
          self.purchase={}
          self.g_id=+1
          print(f'Welcome to Shopidify {self.g_id} ')
        else:
          self.name=name
          self.cart = {}
          self.purchase={}
          print(f'Welcome {self.name} to Shopidify')

    def add_to_cart(self,x,y=None):
      if type(x)!=list:
        if y==None:
         if x not in self.cart:
           self.cart[x]=1
         else:
           self.cart[x]+=1
        else:
          if x not in self.cart:
            self.cart[x]=y
          else:
            self.cart[x]+=y
      else:
        for i in range(0,len(x),2):
         self.cart[x[i]]=x[i+1]


    def display_cart(self):
       if self.name=='Guest':
        print(f'Items in the cart for {self.name}:')
        for item,quantity in self.cart.items():
          print(f'-{item} : {quantity}x')
       else:
        print(f'Items in the cart for {self.name}:')
        for item,quantity in self.cart.items():
          print(f'-{item} : {quantity}x')
    def checkout(self):
       if self.cart:
        trns=len(self.purchase)+1
        self.purchase[f'Transcation {trns}']=self.cart
        #self.cart={}
        if self.name=='Guest':
          print(f'Checkout complete for Guest')
        else:
          print(f'Checkout complete for {self.name}')
    def display_history(self):
      print(f'Purchase history for {self.name}:')
      for item,quantity in self.cart.items():
          print(f'-{item} : {quantity}x')

guest_account = Shopidify()
print("1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
john_account = Shopidify("John")
print("2xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
guest_account.add_to_cart("Air Jordan", 2)
guest_account.add_to_cart("Luffy Action Figure")
guest_account.display_cart()
print("3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
john_account.add_to_cart(["Chocolate Chip Cookies", 3,"Goku Action Figure",2,"Dumbbells-5kg",2])
john_account.display_cart()
print("4xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
guest_account.add_to_cart("Air Jordan")
guest_account.display_cart()
print("5xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
guest_account.checkout()
print("6xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
guest_account.display_history()
print("7xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
john_account.checkout()
print("8xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
john_account.display_history()
print("9xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")

#task5
class Author:
  def __init__(self,name=None):
    self.book={}
    self.name=name
    self.count=0
  def setName(self,n):
    self.name=n
  def addBook(self,books,genre):
    if self.name==None:
      print("A book can not be added without author name")
    else:
      self.count+=1
      if genre not in self.book:
        self.book[genre] = books
      else:
        self.book[genre] +=f',{books}'

  def printDetail(self):
      print(f'Number of Book(s): {self.count} \nAuthor Name: {self.name}')
      for i, j in self.book.items():
        print(f'{i} : {j}')


a1 = Author()
print("==========================")
a1.addBook("Ice", "Science Fiction")
print("==========================")
a1.setName("Anna Kavan")
a1.addBook("Ice", "Science Fiction")
a1.printDetail()
print("==========================")
a2 = Author("Humayun Ahmed")
a2.addBook("Onnobhubon", "Science Fiction")
a2.addBook("Megher Upor Bari", "Horror")
print("==========================")
a2.printDetail()
a2.addBook("Ireena", "Science Fiction")
print("==========================")
a2.printDetail()
print("==========================")

class Ticket:
    route_distance = {"Route A": 400, "Route B": 425, "Route C": 350}
    fare_per_km = 20
    total_tickets = 0

    def __init__(self, route, journeyDate, price=0):
        self.route = route
        self.journeyDate = journeyDate
        self.__price = price
        Ticket.total_tickets += 1

    def setPrice(self, price):
        self.__price = price

    def getPrice(self):
        return self.__price

    def ticket_details(self):
        return f"Route: {self.route}\nJourney Date: {self.journeyDate}"


class BusTicket(Ticket):
    def __init__(self, route, journeyDate, bus_name, seat_no, price=0):
        super().__init__(route, journeyDate, price)
        self.bus_name = bus_name
        self.seat_no = seat_no
        self.status = "Not Paid"
        self.ticket_id = f"Ticket ID:{bus_name}-{Ticket.total_tickets}"

    def calculate_fare(self):
        distance = Ticket.route_distance.get(self.route, 0)
        self.setPrice(distance * Ticket.fare_per_km)
        print(f"Ticket fare is calculated successfully.")

    def make_payment(self):
        if self.status == "Not Paid":
            print("Payment successful.")
            self.status = "Paid"

    def ticket_details(self):
        print(self.ticket_id)
        details = super().ticket_details()
        details += f"\nBus Name: {self.bus_name}\nSeat No: {self.seat_no}\nPrice(tk): {self.getPrice()}\nStatus: {self.status}"
        print(details)


ticket1 = BusTicket("Route A", "30 April, 2023", "Nabil Enterprise", "F2")
print("Total ticket(s):", Ticket.total_tickets)
print("1============================")
ticket1.calculate_fare()
print("2============================")
ticket1.ticket_details()
print("3============================")
ticket1.make_payment()
print("4============================")
ticket1.ticket_details()
print("5============================")
ticket2 = BusTicket("Route C", "26 April, 2023", "Hanif Enterprise", "A2")
print("Total ticket(s):", Ticket.total_tickets)
print("6============================")
ticket2.calculate_fare()
print("7============================")
ticket2.make_payment()
print("8============================")
ticket2.ticket_details()

class ChefsCounter:
  reservation={}

  def __init__(self,branch,seat=5):
   self.branch=branch
   self.seat=seat
   self.customer=[]

   print(f"The {self.branch} branch of Chef''s Counter is open for reservation!")
  def reserve(self,*customer):
    for i in customer:
     self.customer.append(i)
    if len(self.customer)>5:
      self.customer.pop()
      print(f"Sorry {customer[-1]}, {self.seat} people already made a reservation in this branch.")
    ChefsCounter.reservation.update({self.branch:self.customer})
  def reservation_info(self):
    print(f'Customers who reserved in {self.branch} branch:')
    print(",".join(self.customer))
  @classmethod
  def createNewBranch(cls,branch,seat=5):
    return cls(branch,seat)



print("===============1=============")
branch1 = ChefsCounter("Gulshan")
print("===============2=============")
branch1.reserve("Sam", "Paul")
print("===============3=============")
branch1.reservation_info()
print("===============4=============")
branch1.reserve("John", "Robin", "Billy","Robert")
print("===============5=============")
branch1.reservation_info()
print("===============6=============")
branch2 = ChefsCounter("Dhanmondi",7)
print("===============7=============")
branch2.reserve("Ben", "Alice", "Fred")
print("===============8=============")
branch2.reservation_info()
print("===============9=============")
branch2.reserve("Tom", "Ken", "Garet","Miles", "Taylor")
print("===============10=============")
branch2.reservation_info()
print("===============11=============")
branch3 = ChefsCounter.createNewBranch("100 feet")
print("===============12=============")
branch3.reserve("Harry", "Bob", "Jenny")
print("===============13=============")
branch3.reservation_info()
print("===============14=============")
print("Reservation Information of AllBranches:",ChefsCounter.reservation)